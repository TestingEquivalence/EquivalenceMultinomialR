if (t<eps){
bps=lapply(exteriorPoints,linearBoundaryPoint,q=q,eps=eps,b=b)
dst=lapply(bps, smooth_tvd,y=q,b=b)
pos=which.min(dst)
rp=bps[pos]
}
#simulate bootstrap sample
i=c(1:nSimulation)
f<-function(k){
v=rmultinom(n=1,size=n,prob=rp)
v=v/sum(v)
return(smooth_tvd(v,q,b))
}
sample=lapply(i,f)
#bootstrap test
pValue=sum(sample<=t)/nSimulation
return(pValue<=alpha)
}
source("asymptotic_test.R")
source("asymptotic_test.R")
source('~/TestEquivalenceMultinomial/asymptotic_test.R', echo=TRUE)
source("asymptotic_test.R")
#Mendels inheritance law
p = c(315, 101, 108, 32)
q = c(9 / 16, 3 / 16, 3 / 16, 1 / 16)
n=sum(p)
b= 0.01 / sqrt(n)
eps=0.1
alpha=0.05
res=asymptotic_test(p/n,q,n,b,eps,alpha)
res=asymptotic_test(p/n,q,n,b,alpha)
res
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source("bootstrap_test.R")
asympt_res=asymptotic_test(p/n,q,n,b,alpha)
bst_res=bootstrap_test(p,q,n,b,alpha)
nExteriorPoints
p
q
bst_res=bootstrap_test(p/n,q,n,b,alpha)
eps
t
eps
bst_res=bootstrap_test(p/n,q,n,b,alpha)
t
eps
bst_res=bootstrap_test(p/n,q,n,b,alpha)
exteriorPoints[1]
?lapply
p
randomExteriorPoint(eps,q,b)
randomExteriorPoint(eps,q,b)
eps
q
b
randomExteriorPoint(eps,q,b)
x
length(q)
randomPoint(4)
x
x
randomPoint<-function(d){
x=runif(d,0,1)
x=x/sum(x)
return(x)
}
randomPoint(4)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
exteriorPoints
exteriorPoints
exteriorPoints[1]
randomExteriorPoint(0.4,1,b)
q
eps
b
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
p = c(315, 101, 108, 32)
q = c(9 / 16, 3 / 16, 3 / 16, 1 / 16)
n=sum(p)
b= 0.01 / sqrt(n)
eps=0.1
alpha=0.05
randomExteriorPoint(0.01,q,b)
x
x
sum(x)
t
randomExteriorPoint(0.01,q,b)
randomExteriorPoint(0.01,q,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomExteriorPoint(0.01,q,b)
randomExteriorPoint(0.01,q,b)
randomExteriorPoint(0.01,q,b)
randomExteriorPoint(0.01,q,b)
randomExteriorPoint(0.01,q,b)
rp=randomExteriorPoint(0.01,q,b)
rp
smooth_tvd(rp,q,b)
randomLinBoundaryPoint(q,0.04,b)
randomLinBoundaryPoint<-function(q,eps,b){
p=randomExteriorPoint(eps,b,q)
lc=linearBoundaryPoint(p,q,eps,b)
return(lc)
}
randomLinBoundaryPoint(q,0.04,b)
randomLinBoundaryPoint(q,0.04,b)
randomLinBoundaryPoint(q,0.04,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
b
q
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
randomLinBoundaryPoint(q,0.04,b)
p
smooth_tvd(p,q,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
randomLinBoundaryPoint(q,0.04,b)
p
q
a
p
eps
tvd-eps
a
a
?uniroot
randomLinBoundaryPoint(q,0.04,b)
amin
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
aMin
aMin
amin$root
aMin$root
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
randomLinBoundaryPoint(q,0.04,b)
bp=randomLinBoundaryPoint(q,0.04,b)
bp
smooth_tvd(bp,q,b)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
exteriorPoints
exteriorPoints[1]
eps
t
sample
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
print(n)
rp
sample
eps
bst_res=bootstrap_test(p/n,q,n,b,alpha)
rp
corevalue(rp)
corevalue(rp)
rp[1]
unlist(rp)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
bst_res
bst_res$root
source("asymptotic_test.R")
source("bootstrap_test.R")
#Mendels inheritance law
p = c(315, 101, 108, 32)
q = c(9 / 16, 3 / 16, 3 / 16, 1 / 16)
n=sum(p)
b= 0.01 / sqrt(n)
eps=0.1
alpha=0.05
asympt_res=asymptotic_test(p/n,q,n,b,alpha)
bst_res=bootstrap_test(p/n,q,n,b,alpha)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
# theoretic distribution, stated by Benford's law
q=c(1..9)
# theoretic distribution, stated by Benford's law
q=c(1:9)
q
q = Log10(1 + 1 / q)
q = log10(1 + 1 / q)
q
q=q/sum(q)
q
sum(q)
# 2. example: Benford's law for Apple daily returns
# -------------------------------------------------
# counting of the first digit of the Apple daily returns
p = c(2001, 1359, 872, 625, 468, 417, 306, 251, 208)
# theoretic distribution, stated by Benford's law
q=c(1:9)
q =log10(1 + 1 / q)
q=q/sum(q)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example2_asympt=asymptotic_test(p/n,q,n,b,alpha)
example2_bst=bootstrap_test(p/n,q,n,b,alpha)
?c
# theoretic distribution, stated by Benford's law
q=c(0.1, 10)
q
# theoretic distribution, stated by Benford's law
q=rep(0.1,10)
q
length((q))
sum(q)
# 3. example: decimal digits of pi
# -------------------------------------------------
# counting of the first 1000 decimal digits of pi
p = c(93, 116, 103, 102, 93, 97, 94, 95, 101, 106)
# theoretic distribution of decimal digits of pi is uniform
q=rep(0.1,10)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example3_asympt=asymptotic_test(p/n,q,n,b,alpha)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
x
pval
exteriorPoints
x
smooth_tvd(exteriorPoints[1],q,b)
q
exteriorPoints[1]
smooth_tvd(unlist[exteriorPoints[1]],q,b)
smooth_tvd(unlist(exteriorPoints[1]),q,b)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
x
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
t
pos
smooth_tvd(rp,q,b)
eps
print(n)
sample
t
smooth_tvd(rp,q,b)
t
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source("asymptotic_test.R")
source("bootstrap_test.R")
# counting observed by Mendel's (of pea plant seed)
p = c(315, 101, 108, 32)
# theoretic distribution, stated by Mendel's inheritance law
q = c(9 / 16, 3 / 16, 3 / 16, 1 / 16)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example1_asympt=asymptotic_test(p/n,q,n,b,alpha)
example1_bst=bootstrap_test(p/n,q,n,b,alpha)
# counting of the first digit of the Apple daily returns
p = c(2001, 1359, 872, 625, 468, 417, 306, 251, 208)
# theoretic distribution, stated by Benford's law
q=c(1:9)
q =log10(1 + 1 / q)
q=q/sum(q)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example2_asympt=asymptotic_test(p/n,q,n,b,alpha)
example2_bst=bootstrap_test(p/n,q,n,b,alpha)
# counting of the first 1000 decimal digits of pi
p = c(93, 116, 103, 102, 93, 97, 94, 95, 101, 106)
# theoretic distribution of decimal digits of pi is uniform
q=rep(0.1,10)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example3_asympt=asymptotic_test(p/n,q,n,b,alpha)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source("asymptotic_test.R")
source("bootstrap_test.R")
# examples of apllication of the equivalence test to the real data sets
# we test equivalence of the observed counting frequencies to
# the fully specified multinomial distribution (categorial distribution)
# 1. example: Mendel's inheritance law
# -------------------------------------------------
# counting observed by Mendel's (of pea plant seed)
p = c(315, 101, 108, 32)
# theoretic distribution, stated by Mendel's inheritance law
q = c(9 / 16, 3 / 16, 3 / 16, 1 / 16)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example1_asympt=asymptotic_test(p/n,q,n,b,alpha)
example1_bst=bootstrap_test(p/n,q,n,b,alpha)
example1_bst=bootstrap_test(p/n,q,n,b,alpha)
eps
t
t
eps
t<eps
eps
rp==p
q
eps
t
eps
smooth_tvd(rp,p,b)
smooth_tvd(rp,q,b)
t
eps
eps
smooth_tvd(rp,q,b)
eps
smooth_tvd(rp,p,b)
t
eps
t
eps
smooth_tvd(rp,p,b)
smooth_tvd(rp,q,b)
eps
eps
t
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
# 1. example: Mendel's inheritance law
# -------------------------------------------------
# counting observed by Mendel's (of pea plant seed)
p = c(315, 101, 108, 32)
# theoretic distribution, stated by Mendel's inheritance law
q = c(9 / 16, 3 / 16, 3 / 16, 1 / 16)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example1_asympt=asymptotic_test(p/n,q,n,b,alpha)
example1_bst=bootstrap_test(p/n,q,n,b,alpha)
# 3. example: decimal digits of pi
# -------------------------------------------------
# counting of the first 1000 decimal digits of pi
p = c(93, 116, 103, 102, 93, 97, 94, 95, 101, 106)
# theoretic distribution of decimal digits of pi is uniform
q=rep(0.1,10)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.05
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example3_asympt=asymptotic_test(p/n,q,n,b,alpha)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
t
t*2
t
eps
rp==p
rp
sum(sample<t)
pValue
t
smooth_tvd(rp,q,b)
eps
smooth_tvd(rp,p,b)
smooth_tvd(rp,q,b)
eps
pValue
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/examples.R', echo=TRUE)
# 3. example: decimal digits of pi
# -------------------------------------------------
# counting of the first 1000 decimal digits of pi
p = c(93, 116, 103, 102, 93, 97, 94, 95, 101, 106)
# theoretic distribution of decimal digits of pi is uniform
q=rep(0.1,10)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.04
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example3_asympt=asymptotic_test(p/n,q,n,b,alpha)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
# 3. example: decimal digits of pi
# -------------------------------------------------
# counting of the first 1000 decimal digits of pi
p = c(93, 116, 103, 102, 93, 97, 94, 95, 101, 106)
# theoretic distribution of decimal digits of pi is uniform
q=rep(0.1,10)
# number of observations
n=sum(p)
# smoothing parameter for the smooth total variation distance
b= 0.01 / sqrt(n)
# level
alpha=0.035
# tests return the minimum tolerance parameter epsilon,
# for which the equivalence between the theoretical and observed distribution can be shown
# at the significance level alpha
example3_asympt=asymptotic_test(p/n,q,n,b,alpha)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
# level
alpha=0.035
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
source('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
# level
alpha=0.035
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
# level
alpha=0.035
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
lb
lb
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
# level
alpha=0.035
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
x
debugSource('~/TestEquivalenceMultinomial/bootstrap_test.R', echo=TRUE)
example3_bst=bootstrap_test(p/n,q,n,b,alpha)
source('~/TestEquivalenceMultinomial/asymptotic_test.R', echo=TRUE)
library("roxygen2", lib.loc="~/R/win-library/3.4")
library(roxygen2)
source('~/TestEquivalenceMultinomial/asymptotic_test.R', echo=TRUE)
?roxygen2
?rd
??roxygen2
roxygenize(package.dir = ".", roclets = NULL,
load_code = env_package, clean = FALSE)
